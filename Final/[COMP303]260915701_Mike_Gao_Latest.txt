Q1: Academic integrity acknowledgement: Please affirm your acceptance of the integrity code. [0]

Your answer [Yes/No]: Yes

-------------------------------------------
-------------------------------------------
Q2.1:	The client class should be able to traverse the songs in the pool without knowing the underlying structure of how the songs are saved in the MusicPlayer. [5]

Explanation:

We use the Iterator design pattern, because it provides a way to access the elements of an aggregate object sequentially without exposing the underlying representation.

-------------------------------------------
Q2.2:	The client class should be able to create and save playlists using the music app. The same song can be added to the playlist multiple times. A playlist can also be nested, i.e. any element in the playlist can be a playlist itself. [15]

Explanation:

In order to be able to save nested playlist, we first have to realize that playlist and songs can both be saved into the main playlist within MusicPlayer.

So here we create an Interface PlayListElem, and both PlayList and Song implements PlayListElem, which allows for nested PlayList.

Finally, to maximize code efficiency, instead of creating separate "create playlist" and "add item to playlist" method, only the below method is created combing both "creation" and "add item" function.

public void addItemToPlayList(String s, PlayListElem e)  creates a PlayList if a playlist of name s does not exist.


-------------------------------------------
Q2.3: The client class can add all the songs from a playlist to the queue. When added, the order of the songs in the playlist is maintained. [5]

Explanation:

I used a recursive method to recursively add songs. See addPlayListToQueue(String s) for detail.


-------------------------------------------
-------------------------------------------
Q3.1: Support the two ways of client code can access the song in the queue, i.e. ordered play and shuffled play. [15]

Explanation:

Here we use the Strategy design pattern. To allow for maximum extensibility, we create an abstract class AbstractPlay, which implements PlayOrder.

We then create OrderedPlay that extends AbstractPlay and ShuffledPlay that extends AbstractPlay.

In addition, to make the design more robust, I've also made Queue to only take in Song.


-------------------------------------------
Q3.2: The client code can specify using which order to playing queue at any time using the music app. [5]

Explanation:

I configured the default play order to be OrderedPlay().
Whenever user feel like updating the playorder they can create a new AbstractPlay object and use setPlayOrder(AbstractPlay p).


-------------------------------------------
Q3.3: During your design, take consideration on how to avoid “null” when the queue is empty and when it reaches its end. [5]

Explanation:

I use the iterator's hasnext() method to ensure that there is nothing left to be played in the queue and that no "null" is returned, ever.


-------------------------------------------
Q3.4: Whenever the content of the queue is changed (songs added or removed), the playing order is reinitialized according to the latest status of the queue. [10]

Explanation:

Whenever the content of the queue is changed, we simply reinitialize playOrder by doing playOrder.init();


-------------------------------------------
Q3.5: Write the unit test for the class representing the shuffled play strategy and achieve the 100% method coverage. [10] 

Explanation:

See ShuffledPlayTest.java


-------------------------------------------
-------------------------------------------
Q4.1: Using the provided Controller interface, achieve the support for both remote controller and voice controller for playing next either the song in the music player or radio station in the radio receiver. For the voice controller, please simply print some message using the Java print stream to mimic generating speech for the sake of this exam. [15]

Explanation:

See RemoteController.java and VoiceController.java
I used the composition design pattern here, first creating the Controllable Interface, Which MusicPlayer implements.
Should there be a RadioReceiver, it should also implement the Controllable Interface.


-------------------------------------------
Q4.2: Write a mock-up client code to showcase the complete code you have designed and implemented so far (from Questions 2-4) in the empty main method in the HomeEntertainmentSystem class. [10]

Explanation:

See the HomeEntertainmentSystem.java.


-------------------------------------------
-------------------------------------------
Q4.Takeaways/Feedback for this course [5]

Your answer:
I really like the videos in the online potion of the course.
I think while lecture recording can be less effective than in class teaching, the small video tutorial should be preserved.
I think the questions in this exam is quite vague. The code base is good, but the question could be written in a more straightforward and concise manner.

